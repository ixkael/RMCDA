#R --slave --vanilla --args "in" "out" < weightedSum.R


exportLog <- function( LOG , outputsLocation , status="FAILED" ) 
{
	if( status == "FAILED" )
	{
		logMessage <- "Computation Failed"	
		errorMessage <- LOG[  length(LOG) ] #[]?
	} 
	else 
	{
		logMessage <- "Alternatives Values successfully computed"
		errorMessage <- "No error"
	}	
	z <- convertLogIntoTree( logMessage , errorMessage )
	f <- tempfile()
	saveXML(z, f, encoding = "UTF-8",indent=TRUE,file=paste(outputsLocation,"messages.xml",sep="/"),prefix = '<?xml version="1.0"?>\n')
}

convertLogIntoTree <- function( logMessage="error" , errorMessage="error" ) 
{
	z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))
	z$addNode("methodMessages",close=FALSE,attrs=c("mcdaConcept"="methodMessages"))
	z$addNode("logMessage",close=FALSE)
	z$addNode("text",logMessage)
	z$closeTag()
	z$addNode("errorMessage",close=FALSE)
	z$addNode("text",errorMessage)
	z$closeTag()
	return(z)
}

########################################################################

inputsLocation <- commandArgs()[5]
outputsLocation <- commandArgs()[6]

#source("/Users/silver/Desktop/Rstat/ACUTAR/OLD/XMCDA/libxmcda.R")
#source("/Users/silver/Desktop/Rstat/libACUTAR.R")
#source("libACUTAR.R")

library(RXMCDA)
listOfFiles <- list.files( inputsLocation )
location <- listOfFiles[ listOfFiles == "alternatives.xml" ]
if ( length( location ) == 0 ) 
{
	exportLog( list("failed to find alternatives.xml") , outputsLocation ) 
	stop("alternatives.xml")
}
location <- paste( inputsLocation , location , sep="/" )
xml <- xmlInternalTreeParse( location )
if( checkXSD( xml ) != 1 )
{
	exportLog( list("alternatives.xml is not a valid XMCDA file") , outputsLocation ) 
	stop("alternatives.xml")	
}
alternativesIDs <- getAlternativesIDs ( xml )
if ( alternativesIDs$status != "OK" )
{
	exportLog( list("failed to get data from alternatives.xml") , outputsLocation ) 
	stop("alternatives.xml")
}
alternativesIDs <- alternativesIDs[[1]]


location <- listOfFiles[ listOfFiles == "criteria.xml" ]
if( length( location ) == 0 ) 
{
	exportLog( list("failed to find criteria.xml") , outputsLocation )
	stop("criteria.xml")
}
location <- paste( inputsLocation , location , sep="/" )
xml <- xmlInternalTreeParse( location )
if( checkXSD( xml ) != 1 )
{
	exportLog( list("criteria.xml is not a valid XMCDA file") , outputsLocation ) 
	stop("criteria.xml")	
}
criteriaIDs <- getCriteriaIDs ( xml )
if ( is.null( criteriaIDs$status != "OK" ) )
{
	exportLog( list("failed to get data from criteria.xml") , outputsLocation )
	stop("criteria.xml")
}
criteriaIDs <- criteriaIDs[[1]]


listOfFiles <- list.files( inputsLocation )
location <- listOfFiles[ listOfFiles == "performanceTable.xml" ]
if( length( location ) == 0 ) 
{
	exportLog( list("failed to find performanceTable.xml") , outputsLocation ) 
	stop("performanceTable.xml")
}
location <- paste( inputsLocation , location , sep="/" )
xml <- xmlInternalTreeParse( location )
if( checkXSD( xml ) != 1 )
{
	exportLog( list("performanceTable.xml is not a valid XMCDA file") , outputsLocation ) 
	stop("performanceTable.xml")	
}
PT <- getPerformanceTables( xml )[[1]]
performanceTable <- PT



co <- colnames(performanceTable)
ro <- rownames(performanceTable)
temporaryAlternatives <- c()
temporaryCriteria <- c()
for (l in 1:length(alternativesIDs) )
{
	temp <- which( ro == alternativesIDs[l] )
	temporaryAlternatives <- c( temporaryAlternatives , temp )
}
temporaryCriteria <- c()
for (l in 1:length(criteriaIDs) )
{
	temp <- which( co == criteriaIDs[l] ) 
	temporaryCriteria <- c( temporaryCriteria , temp )
}
PT <- performanceTable[ temporaryAlternatives , temporaryCriteria ]
critIDs <- colnames(PT)



location <- listOfFiles[ listOfFiles == "avg.xml" ]
if( length( location ) == 0 ) 
{
	avg <- FALSE
}
if(  length( location ) > 0 )
{
	location <- paste( inputsLocation , location , sep="/" )
	xml <- xmlInternalTreeParse( location )
	if( checkXSD( xml ) != 1 )
	{
		exportLog( list("avg.xml is not a valid XMCDA file") , outputsLocation ) 
		stop("avg.xml")	
	}
	result <- getParameters( xml )	
	if( result$status != "OK")
	{
		avg <- FALSE
	}else{	
		avg <- as.logical(result[[1]])
		if( is.na(avg) )
		{
			avg <- FALSE
		}
	}
}

location <- listOfFiles[ listOfFiles == "norm.xml" ]
if( length( location ) == 0 ) 
{
	norm <- FALSE
}
if(  length( location ) > 0 )
{
	location <- paste( inputsLocation , location , sep="/" )
	xml <- xmlInternalTreeParse( location )
	if( checkXSD( xml ) != 1 )
	{
		exportLog( list("norm.xml is not a valid XMCDA file") , outputsLocation ) 
		stop("norm.xml")	
	}
	result <- getParameters( xml )
	if( result$status != "OK")
	{
		norm <- FALSE
	}else{	
		norm <- as.logical(result[[1]])
		if( is.na(norm) )
			norm <- FALSE
	}
}




if( avg == TRUE )
{
	weights <- rep( 1/ncol(PT) , ncol(PT) )
} 
if( avg == FALSE)
{
	location <- listOfFiles[ listOfFiles == "weights.xml" ]
	if( length( location ) == 0 ) 
	{
		weights <- rep( 1 , ncol(PT) )
	}
	else 
	{
		location <- paste( inputsLocation , location , sep="/" )
		xml <- xmlInternalTreeParse( location )
		if( checkXSD( xml ) != 1 )
		{
			exportLog( list("weights.xml is not a valid XMCDA file") , outputsLocation ) 
			stop("weights.xml")	
		}
		criteriaValues <- getCriteriaValues ( xml , critIDs )
		if ( is.null(criteriaValues[[1]]) || criteriaValues$status != "OK" )
		{
			exportLog( list("weights file problem") , outputsLocation )
			stop("weigths.xml")
		}
		weights <- criteriaValues[[1]]
		rownames(weights) <- critIDs
		weights <- as.vector( weights[,2] )
		if( norm == TRUE )
		{
			weights <- weights / sum(weights)
		}
	}
}

sol <- rep(0,nrow(PT))
for( i in 1:nrow(PT) )
{
	sum <- 0
	for( j in 1:ncol(PT) )
	{
		sum <- sum + PT[i,j] * weights[j]
	}
	sol[i] <- sum
}

sol <- matrix(c(seq(from=1,to=nrow(PT),by=1),sol), nrow = nrow(PT) )

f <- tempfile()
z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))
z <- xmlInternalTreeParse( saveXML(z, f, encoding = "UTF-8",indent=TRUE,prefix = '<?xml version="1.0"?>\n') )
putAlternativesValues( z , sol  , rownames(PT) )
filename <- "alternativesValues.xml"
whereF =  paste( outputsLocation , filename , sep="/" )

exportLog( list("OK") , outputsLocation , status = "OK" )
saveXML(z, f, encoding = "UTF-8",indent=TRUE, file=whereF,prefix = '<?xml version="1.0"?>\n')
