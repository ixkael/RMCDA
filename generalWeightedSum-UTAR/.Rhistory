help(plot)
point(PT[,1])
points(PT[,1])
plot( PT[,1] )
text(labels=rownames(PT))
text(PT[,1],labels=rownames(PT))
text(PT[,1],pos=3,offset=1.3,cex=2,labels=rownames(PT))
plot( PT[,1] )
text(PT[,1],pos=3,offset=1.3,cex=2,labels=rownames(PT))
text(PT[,1],pos=3,offset=1.3,cex=1,labels=rownames(PT))
plot( PT[,1] )
text(PT[,1],pos=3,offset=1.3,cex=1,labels=rownames(PT))
text(PT[,1],pos=3,offset=1,cex=1,labels=rownames(PT))
text(PT[,1],pos=3,offset=0.7,cex=1,labels=rownames(PT))
plot( PT[,1] )
text(PT[,1],pos=3,offset=0.7,cex=1,labels=rownames(PT))
plot( PT[,1] )
text(PT[,1],pos=3,offset=0.7,cex=3,labels=rownames(PT))
plot( PT[,1] )
text(PT[,1],pos=3,offset=0.7,cex=2,labels=rownames(PT))
plot( PT[,1] )
plot( PT[,2] )
plot( PT[,3] )
plot( PT[,4] )
plot( PT[,5] )
plot( PT[,1] )
plot( PT[,2] )
plot( PT[,3] )
plot( PT[,4] )
plot( PT[,5] )
load( "/Users/silver/Desktop/result.Rdata")
RESULTS
e<-RESULTS[[2]]$evolution
e
e<-RESULTS[[2]]$doneB
e
help(mbar)
help(bar)
par( mfrow=c(5,1))
plot( e[,3])
plot( e[,4])
plot( e[,5])
plot( e[,6])
plot( e[,7])
par( mfrow=c(3,1))
plot( e[,3])
plot( e[,3] , type="b")
plot( e[,4] , type="b")
plot( e[,3] , type="b")
plot( e[,4] , type="b")
plot( e[,5] , type="b")
plot( e[,6] , type="b")
plot( e[,7] , type="b")
c(1,2,3)
c(3,4,5)
b = c(3,4,5)
a = c(1,2,3)
a*b
load("/Users/silver/Desktop/evolution.Rdata")
evolution
load("/Users/silver/Desktop/evolution.Rdata")
evolution
x <- t( as.matrix( evolution[,3]/evolution[1,3]))
x
y <- rbind( x , evolution[,4]/evolution[1,4])
y <- rbind( y , evolution[,5]/evolution[1,5])
y <- rbind( y , evolution[,6]/evolution[1,6])
y <- rbind( y , evolution[,7]/evolution[1,7])
y
plot(y)
x <- seq(1,16)
x
plot(x,y)
plot(x,y[1,])
plot(x,y[1,],x,y[2,])
help(plot)
x <- rbind( x,x,x,x,x)
x
plot( x , y )
plot( x , y , type="b")
plot( t(x) , t(y) )
plot( t(x) , t(y) ,type="b")
plot( t(x) , t(y) ,type="l")
plot( c(x[1,],x[2,],x[3,]),c(y[1,],y[2,],y[3,]))
plot( c(x[1,],x[2,],x[3,]),c(y[1,],y[2,],y[3,]),type="l")
help(plot)
plot( c(x[1,],x[2,],x[3,]),c(y[1,],y[2,],y[3,]),type="c")
plot( c(x[1,],x[2,],x[3,]),c(y[1,],y[2,],y[3,]),type="l")
plot(c(y[1,],y[2,],y[3,]),type="l")
plot(t(y) ,type="l")
plot(y ,type="l")
x,
plot(x,y ,type="l")
plot( t(x) , t(y) ,type="l")
help(par)
plot( t(x) , t(y) )
load("/Users/silver/Desktop/evolution.Rdata")
evolution
load("/Users/silver/Desktop/evolution.Rdata")
evolution
plot( evolution[,3] )
plot( evolution[,3] , type="b")
y <- matrix(ncol=16,nrow=0)
y <- rbind( evolution[,3]/max(evolution[,3]) )
y <- rbind( evolution[,4]/max(evolution[,4]) )
y <- rbind( evolution[,5]/max(evolution[,5]) )
y <- rbind( evolution[,6]/max(evolution[,6]) )
y <- rbind( evolution[,7]/max(evolution[,7]) )
y
y <- rbind( evolution[,3]/max(evolution[,3]) )
y <- rbind( y,evolution[,4]/max(evolution[,4]) )
y <- rbind( y,evolution[,5]/max(evolution[,5]) )
y <- rbind( y,evolution[,6]/max(evolution[,6]) )
y <- rbind( y,evolution[,7]/max(evolution[,7]) )
y
plot(y[1])
plot(y[1,])
lines(y[2,])
plot(y[1,],type="l")
lines(y[2,])
lines(y[3,])
lines(y[4,])
lines(y[5,])
plot(y[1,],type="l",ylim=c(0,1))
lines(y[2,])
lines(y[3,])
lines(y[4,])
lines(y[5,])
evolution
lines( rep(1304.188/max(evolution[,3]),17) )
lines( rep(evolution[17,4]/max(evolution[,4]),17) )
lines( rep(evolution[17,5]/max(evolution[,5]),17) )
lines( rep(evolution[17,6]/max(evolution[,6]),17) )
lines( rep(evolution[17,7]/max(evolution[,7]),17) )
lines( rep(evolution[17,7]/max(evolution[,7]),17) ,col="grey70")
lines( rep(evolution[17,7]/max(evolution[,7]),17) ,col="grey50")
lines( rep(evolution[17,7]/max(evolution[,7]),17) ,col="grey10")
lines( rep(evolution[17,7]/max(evolution[,7]),17) ,col="blue")
plot(y[1,],type="l",ylim=c(0,1),col="black")
lines( rep(1304.188/max(evolution[,3]),17) )
lines(y[2,],col="blue")
lines( rep(evolution[17,4]/max(evolution[,4]),17) ,col="blue")
lines(y[3,],col="red")
lines( rep(evolution[17,5]/max(evolution[,5]),17) ,col="red")
lines(y[4,],col="green")
lines( rep(evolution[17,6]/max(evolution[,6]),17) ,col="green")
lines(y[5,],col="yellow")
lines( rep(evolution[17,7]/max(evolution[,7]),17) ,col="yellow")
load("/Users/silver/Desktop/evolution.Rdata")
y <- rbind( evolution[,3]/max(evolution[,3]) )
y <- rbind( y, evolution[,4]/max(evolution[,4]) )
y <- rbind( y, evolution[,5]/max(evolution[,5]) )
y <- rbind( y, evolution[,6]/max(evolution[,6]) )
y <- rbind( y, evolution[,7]/max(evolution[,7]) )
y
plot(y[1,],type="l",ylim=c(0,1),col="black")
lines( rep(1304.188/max(evolution[,3]),17) )
lines( rep(1304.188/max(evolution[,3]),21) )
lines(y[2,],col="blue")
lines( rep(evolution[21,4]/max(evolution[,4]),21) ,col="blue")
lines( rep(evolution[21,5]/max(evolution[,5]),21) ,col="red")
lines(y[3,],col="red")
lines(y[4,],col="green")
lines( rep(evolution[21,6]/max(evolution[,6]),21) ,col="green")
lines( rep(evolution[21,7]/max(evolution[,7]),21) ,col="yellow")
lines(y[5,],col="yellow")
 load("/Users/silver/Desktop/evolution.Rdata")#
y <- rbind( evolution[,3]/max(evolution[,3]) )#
y <- rbind( y, evolution[,4]/max(evolution[,4]) )#
y <- rbind( y, evolution[,5]/max(evolution[,5]) )#
y <- rbind( y, evolution[,6]/max(evolution[,6]) )#
y <- rbind( y, evolution[,7]/max(evolution[,7]) ) #
#
plot(y[1,],type="l",ylim=c(0,1),col="black")#
#
lines( rep(1304.188/max(evolution[,3]),21) )#
lines(y[2,],col="blue")#
lines( rep(evolution[21,4]/max(evolution[,4]),21) ,col="blue")#
lines( rep(evolution[21,5]/max(evolution[,5]),21) ,col="red")#
lines(y[3,],col="red")#
lines(y[4,],col="green")#
lines( rep(evolution[21,6]/max(evolution[,6]),21) ,col="green")#
lines( rep(evolution[21,7]/max(evolution[,7]),21) ,col="yellow")#
lines(y[5,],col="yellow")
trueDone <- matrix( c(1,2,3,4,5,6,7,8,9,10,11,12,13,#
				1,2,3,4,5,6,7,8,9,10,11,12,#
				1,2,3,4,5,6,7,8,9,10,11,#
				1,2,3,4,5,6,7,8,9,10,#
				2,3,4,5,6,7,8,9,10,11,12,13,14,#
				3,4,5,6,7,8,9,10,11,12,13,14,#
				4,5,6,7,8,9,10,11,12,13,14,#
				5,6,7,8,9,10,11,12,13,14,#
			) , ncol=2)
 load("/Users/silver/Desktop/evolution.Rdata")#
y <- rbind( evolution[,3]/max(evolution[,3]) )#
y <- rbind( y, evolution[,4]/max(evolution[,4]) )#
y <- rbind( y, evolution[,5]/max(evolution[,5]) )#
y <- rbind( y, evolution[,6]/max(evolution[,6]) )#
y <- rbind( y, evolution[,7]/max(evolution[,7]) ) #
#
plot(y[1,],type="l",ylim=c(0,1),col="black")#
#
lines( rep(1304.188/max(evolution[,3]),21) )#
lines(y[2,],col="blue")#
lines( rep(evolution[21,4]/max(evolution[,4]),21) ,col="blue")#
lines( rep(evolution[21,5]/max(evolution[,5]),21) ,col="red")#
lines(y[3,],col="red")#
lines(y[4,],col="green")#
lines( rep(evolution[21,6]/max(evolution[,6]),21) ,col="green")#
lines( rep(evolution[21,7]/max(evolution[,7]),21) ,col="yellow")#
lines(y[5,],col="yellow")
A <- matrix(c(1,2,3,4,5,6,7,8,9),ncol=3)
A
A * c(1,2,3)
A %*% c(1,2,3)
help(lowRankQP)
help(LowRankQP)
zeros(2)
zero(2)
ones(4)
diag(1,4)
diag(0,4)
load("/Users/silver/Desktop/WAGE1.txt")
read("/Users/silver/Desktop/WAGE1.txt")
READ("/Users/silver/Desktop/WAGE1.txt")
help(lm)
wage <- read.table("/Users/silver/Desktop/WAGE1.txt")#
colnames(wage) <- c( "wage" , "educ" , "exper" , "tenure" , "nonwhite" , "female" , "married" , "numdep" , "smsa" , "northcen" , "south" , "west" , "construc" , "ndurman" , "trcommpu" , "trade" , "services" , "profserv" , "profocc" , "clerocc" , "servocc" , "lwage" , "expersq" , "tenursq")#
#
w <- wage[,1]#
f <- wage[,6]#
#
lm( w ~ f )#
#
plot( density( f[f==1] ) )#
lines( density( f[f==0] ) ,col=2 )
plot( density( wage$educ[wage$female==1] ) )#
lines( density( wage$educ[wage$female==0] ) ,col=2 )
help(lm)
lm( wage[,1] ~ wage[,6] + wage[,2]  )
lm( wage[,1] ~ wage[,6] + wage[,2] + wage[,3] + wage[,4]  )
lm( wage[,1] ~ wage[,6] + wage[,2] + wage[,3] + wage[,4] + wage[,7] )
lm( wage[,1] ~ wage[,6] + wage[,2] + wage[,3] + wage[,4] + ( wage[,7] * wage[,6] ) + ( 1 - wage[,6] )*wage[,7] )
lm( wage[,1] ~ wage[,6] + wage[,2] + wage[,3] + wage[,4] + ( wage[,7] * wage[,6] ) + (( 1 - wage[,6] )*wage[,7]) )
mh <- ( 1 - wage[,6] )*wage[,7])#
mf <-  ( wage[,7] * wage[,6] )#
 lm( wage[,1] ~ wage[,6] + wage[,2] + wage[,3] + wage[,4] + mh + wage[,13] )
mh <- ( 1 - wage[,6] )*wage[,7]#
mf <-  ( wage[,7] * wage[,6] )#
 lm( wage[,1] ~ wage[,6] + wage[,2] + wage[,3] + wage[,4] + mh + mf + wage[,13] )
 lm(wage)
 round(lm(wage),digits=3)
 round(lm(wage),digits=-3)
U <- lm(wage)
U
U$coefficients
round( U$coefficients , digits=3 )
summary( U$coefficients  )
matrix( c(1,2,3,4,5,6,7,8,9),ncol=3,nrow=3)
matrix( c(1,2,3,4,5,6,7,8,9),ncol=3,nrow=3) %*%c(1,2,3)
 load("/Users/silver/Desktop/evolution.Rdata")#
y <- rbind( evolution[,3]/max(evolution[,3]) )#
y <- rbind( y, evolution[,4]/max(evolution[,4]) )#
y <- rbind( y, evolution[,5]/max(evolution[,5]) )#
y <- rbind( y, evolution[,6]/max(evolution[,6]) )#
y <- rbind( y, evolution[,7]/max(evolution[,7]) ) #
#
plot(y[1,],type="l",ylim=c(0,1),col="black")#
#
lines( rep(1304.188/max(evolution[,3]),21) )#
lines(y[2,],col="blue")#
lines( rep(evolution[21,4]/max(evolution[,4]),21) ,col="blue")#
lines( rep(evolution[21,5]/max(evolution[,5]),21) ,col="red")#
lines(y[3,],col="red")#
lines(y[4,],col="green")#
lines( rep(evolution[21,6]/max(evolution[,6]),21) ,col="green")#
lines( rep(evolution[21,7]/max(evolution[,7]),21) ,col="yellow")#
lines(y[5,],col="yellow")
data("PublicSchools")
str(PublicSchools)
str
library(lmtest)
library(XMCDA)
xml <- xmlInternalTreeParse("\Users\Silver\RMCDA\plotValueFunctions-UTAR\in\criteria.xml")
xml <- xmlInternalTreeParse("/Users/Silver/RMCDA/plotValueFunctions-UTAR/in/criteria.xml")
xml
getNodeSet(xml,"xmcda")
getNodeSet(xml,"criteria")
xml
getNodeSet(xml,"xml")
getNodeSet(xml,"xmcda")
getNodeSet(xml,"xmcda:XMCDA")
getNodeSet(xml,"//xmcda:XMCDA")
getNodeSet(xml,"//xmcda")
getNodeSet(xml,"//xmcda:XMCDA")
xml <- xmlInternalTreeParse("/Users/Silver/RMCDA/plotValueFunctions-UTAR/in/criteria.xml")
xml
getNodeSet(xml,"//xmcda")
getNodeSet(xml,"//criteria")
getNodeSet(xml,"//xmcda")
getNodeSet(xml,"//criteria")
library(XMCDA)
library(RXMCDA)
saaa
setwd("/Users/silver/RMCDA/UTAR/generalWeightedSum-UTAR")
inputsLocation <- "in"
outputsLocation <- "out"
source("/Users/silver/RMCDA/UTAR/UTAR-lib.R")
library(XMCDA)
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "alternatives.xml" ]#
			if ( length( location ) == 0 ) #
			{#
				exportLog( "failed to find alternatives.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "alternatives.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			alternativesIDs <- getAlternativesIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') || alternativesIDs$status != "OK" )#
{#
	exportLog( "failed to get data from alternatives.xml" , outputsLocation ) #
}#
alternativesIDs <- alternativesIDs[[1]]#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "criteria.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find criteria.xml" , outputsLocation )#
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "criteria.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			criteriaIDs <- getCriteriaIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') ||  is.null( criteriaIDs$status != "OK" ) )#
{#
	exportLog( "failed to get data from criteria.xml" , outputsLocation )#
}#
criteriaIDs <- criteriaIDs[[1]]#
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "performanceTable.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find performanceTable.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "performanceTable.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			PT <- getPerformanceTables( xml )[[1]]#
			performanceTable <- PT#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "failed to get data from performanceTable.xml" , outputsLocation ) #
}#
#
#
tmpErr <- try({#
			co <- colnames(performanceTable)#
			ro <- rownames(performanceTable)#
			temporaryAlternatives <- c()#
			temporaryCriteria <- c()#
			for (l in 1:length(alternativesIDs) )#
			{#
				temp <- which( ro == alternativesIDs[l] )#
				temporaryAlternatives <- c( temporaryAlternatives , temp )#
			}#
			temporaryCriteria <- c()#
			for (l in 1:length(criteriaIDs) )#
			{#
				temp <- which( co == criteriaIDs[l] ) #
				temporaryCriteria <- c( temporaryCriteria , temp )#
			}#
			PT <- performanceTable[ temporaryAlternatives , temporaryCriteria ]#
			critIDs <- colnames(PT)#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error while manipulating criteria and alternatives")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "avg.xml" ]#
			if( length( location ) == 0 ) #
			{#
				avg <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "avg.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )	#
				if( result$status != "OK")#
				{#
					avg <- FALSE#
				}else{	#
					avg <- as.logical(result[[1]])#
					if( is.na(avg) )#
					{#
						avg <- FALSE#
					}#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during average selection ")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "norm.xml" ]#
			if( length( location ) == 0 ) #
			{#
				norm <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "norm.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )#
				if( result$status != "OK")#
				{#
					norm <- FALSE#
				}else{	#
					norm <- as.logical(result[[1]])#
					if( is.na(norm) )#
						norm <- FALSE#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during normalisation process")#
}#
#
tmpErr <- try({#
			if( avg == TRUE )#
			{#
				weights <- rep( 1/ncol(PT) , ncol(PT) )#
			} #
			if( avg == FALSE)#
			{#
				location <- listOfFiles[ listOfFiles == "weights.xml" ]#
				if( length( location ) == 0 ) #
				{#
					weights <- rep( 1 , ncol(PT) )#
				}#
				else #
				{#
					location <- paste( inputsLocation , location , sep="/" )#
					xml <- xmlInternalTreeParse( location )#
					if( checkXSD( xml ) != 1 )#
					{#
						exportLog( "weights.xml is not a valid XMCDA file" , outputsLocation ) #
					}#
					criteriaValues <- getCriteriaValues ( xml , critIDs )#
					if ( is.null(criteriaValues[[1]]) || criteriaValues$status != "OK" )#
					{#
						exportLog( "weights file problem" , outputsLocation )#
					}#
					weights <- criteriaValues[[1]]#
					rownames(weights) <- critIDs#
					weights <- as.vector( weights[,2] )#
					if( norm == TRUE )#
					{#
						weights <- weights / sum(weights)#
					}#
				}#
			}#
			#
			#
			sol <- rep(0,nrow(PT))#
			for( i in 1:nrow(PT) )#
			{#
				sum <- 0#
				for( j in 1:ncol(PT) )#
				{#
					sum <- sum + PT[i,j] * weights[j]#
				}#
				sol[i] <- sum#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during weights manipulation")#
}#
#
sol <- matrix(c(seq(from=1,to=nrow(PT),by=1),sol), nrow = nrow(PT) )#
#
tmpErr<-try({#
			z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))#
			z <- xmlInternalTreeParse( saveXML(z) )#
			putAlternativesValues( z , sol  , rownames(PT) )#
		})	#
if (inherits(tmpErr, 'try-error')){#
	message <- "Fatal error while exporting data"#
} else {#
	message <- "Execution successful"#
}#
#
exportLog( message , outputsLocation , error=FALSE )#
saveXML( z, file = "alternativesValues.xml" )
checkXSD
checkXSD <- function(x){ return(1) }
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "alternatives.xml" ]#
			if ( length( location ) == 0 ) #
			{#
				exportLog( "failed to find alternatives.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "alternatives.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			alternativesIDs <- getAlternativesIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') || alternativesIDs$status != "OK" )#
{#
	exportLog( "failed to get data from alternatives.xml" , outputsLocation ) #
}#
alternativesIDs <- alternativesIDs[[1]]#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "criteria.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find criteria.xml" , outputsLocation )#
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "criteria.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			criteriaIDs <- getCriteriaIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') ||  is.null( criteriaIDs$status != "OK" ) )#
{#
	exportLog( "failed to get data from criteria.xml" , outputsLocation )#
}#
criteriaIDs <- criteriaIDs[[1]]#
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "performanceTable.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find performanceTable.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "performanceTable.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			PT <- getPerformanceTables( xml )[[1]]#
			performanceTable <- PT#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "failed to get data from performanceTable.xml" , outputsLocation ) #
}#
#
#
tmpErr <- try({#
			co <- colnames(performanceTable)#
			ro <- rownames(performanceTable)#
			temporaryAlternatives <- c()#
			temporaryCriteria <- c()#
			for (l in 1:length(alternativesIDs) )#
			{#
				temp <- which( ro == alternativesIDs[l] )#
				temporaryAlternatives <- c( temporaryAlternatives , temp )#
			}#
			temporaryCriteria <- c()#
			for (l in 1:length(criteriaIDs) )#
			{#
				temp <- which( co == criteriaIDs[l] ) #
				temporaryCriteria <- c( temporaryCriteria , temp )#
			}#
			PT <- performanceTable[ temporaryAlternatives , temporaryCriteria ]#
			critIDs <- colnames(PT)#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error while manipulating criteria and alternatives")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "avg.xml" ]#
			if( length( location ) == 0 ) #
			{#
				avg <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "avg.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )	#
				if( result$status != "OK")#
				{#
					avg <- FALSE#
				}else{	#
					avg <- as.logical(result[[1]])#
					if( is.na(avg) )#
					{#
						avg <- FALSE#
					}#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during average selection ")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "norm.xml" ]#
			if( length( location ) == 0 ) #
			{#
				norm <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "norm.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )#
				if( result$status != "OK")#
				{#
					norm <- FALSE#
				}else{	#
					norm <- as.logical(result[[1]])#
					if( is.na(norm) )#
						norm <- FALSE#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during normalisation process")#
}#
#
tmpErr <- try({#
			if( avg == TRUE )#
			{#
				weights <- rep( 1/ncol(PT) , ncol(PT) )#
			} #
			if( avg == FALSE)#
			{#
				location <- listOfFiles[ listOfFiles == "weights.xml" ]#
				if( length( location ) == 0 ) #
				{#
					weights <- rep( 1 , ncol(PT) )#
				}#
				else #
				{#
					location <- paste( inputsLocation , location , sep="/" )#
					xml <- xmlInternalTreeParse( location )#
					if( checkXSD( xml ) != 1 )#
					{#
						exportLog( "weights.xml is not a valid XMCDA file" , outputsLocation ) #
					}#
					criteriaValues <- getCriteriaValues ( xml , critIDs )#
					if ( is.null(criteriaValues[[1]]) || criteriaValues$status != "OK" )#
					{#
						exportLog( "weights file problem" , outputsLocation )#
					}#
					weights <- criteriaValues[[1]]#
					rownames(weights) <- critIDs#
					weights <- as.vector( weights[,2] )#
					if( norm == TRUE )#
					{#
						weights <- weights / sum(weights)#
					}#
				}#
			}#
			#
			#
			sol <- rep(0,nrow(PT))#
			for( i in 1:nrow(PT) )#
			{#
				sum <- 0#
				for( j in 1:ncol(PT) )#
				{#
					sum <- sum + PT[i,j] * weights[j]#
				}#
				sol[i] <- sum#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during weights manipulation")#
}#
#
sol <- matrix(c(seq(from=1,to=nrow(PT),by=1),sol), nrow = nrow(PT) )#
#
tmpErr<-try({#
			z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))#
			z <- xmlInternalTreeParse( saveXML(z) )#
			putAlternativesValues( z , sol  , rownames(PT) )#
		})	#
if (inherits(tmpErr, 'try-error')){#
	message <- "Fatal error while exporting data"#
} else {#
	message <- "Execution successful"#
}#
#
exportLog( message , outputsLocation , error=FALSE )#
saveXML( z, file = "alternativesValues.xml" )
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "alternatives.xml" ]#
			if ( length( location ) == 0 ) #
			{#
				exportLog( "failed to find alternatives.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "alternatives.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			alternativesIDs <- getAlternativesIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') || alternativesIDs$status != "OK" )#
{#
	exportLog( "failed to get data from alternatives.xml" , outputsLocation ) #
}#
alternativesIDs <- alternativesIDs[[1]]#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "criteria.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find criteria.xml" , outputsLocation )#
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "criteria.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			criteriaIDs <- getCriteriaIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') ||  is.null( criteriaIDs$status != "OK" ) )#
{#
	exportLog( "failed to get data from criteria.xml" , outputsLocation )#
}#
criteriaIDs <- criteriaIDs[[1]]#
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "performanceTable.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find performanceTable.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "performanceTable.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			PT <- getPerformanceTables( xml )[[1]]#
			performanceTable <- PT#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "failed to get data from performanceTable.xml" , outputsLocation ) #
}#
#
#
tmpErr <- try({#
			co <- colnames(performanceTable)#
			ro <- rownames(performanceTable)#
			temporaryAlternatives <- c()#
			temporaryCriteria <- c()#
			for (l in 1:length(alternativesIDs) )#
			{#
				temp <- which( ro == alternativesIDs[l] )#
				temporaryAlternatives <- c( temporaryAlternatives , temp )#
			}#
			temporaryCriteria <- c()#
			for (l in 1:length(criteriaIDs) )#
			{#
				temp <- which( co == criteriaIDs[l] ) #
				temporaryCriteria <- c( temporaryCriteria , temp )#
			}#
			PT <- performanceTable[ temporaryAlternatives , temporaryCriteria ]#
			critIDs <- colnames(PT)#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error while manipulating criteria and alternatives")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "avg.xml" ]#
			if( length( location ) == 0 ) #
			{#
				avg <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "avg.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )	#
				if( result$status != "OK")#
				{#
					avg <- FALSE#
				}else{	#
					avg <- as.logical(result[[1]])#
					if( is.na(avg) )#
					{#
						avg <- FALSE#
					}#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during average selection ")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "norm.xml" ]#
			if( length( location ) == 0 ) #
			{#
				norm <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "norm.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )#
				if( result$status != "OK")#
				{#
					norm <- FALSE#
				}else{	#
					norm <- as.logical(result[[1]])#
					if( is.na(norm) )#
						norm <- FALSE#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during normalisation process")#
}#
#
tmpErr <- try({#
			if( avg == TRUE )#
			{#
				weights <- rep( 1/ncol(PT) , ncol(PT) )#
			} #
			if( avg == FALSE)#
			{#
				location <- listOfFiles[ listOfFiles == "weights.xml" ]#
				if( length( location ) == 0 ) #
				{#
					weights <- rep( 1 , ncol(PT) )#
				}#
				else #
				{#
					location <- paste( inputsLocation , location , sep="/" )#
					xml <- xmlInternalTreeParse( location )#
					if( checkXSD( xml ) != 1 )#
					{#
						exportLog( "weights.xml is not a valid XMCDA file" , outputsLocation ) #
					}#
					criteriaValues <- getCriteriaValues ( xml , critIDs )#
					if ( is.null(criteriaValues[[1]]) || criteriaValues$status != "OK" )#
					{#
						exportLog( "weights file problem" , outputsLocation )#
					}#
					weights <- criteriaValues[[1]]#
					rownames(weights) <- critIDs#
					weights <- as.vector( weights[,2] )#
					if( norm == TRUE )#
					{#
						weights <- weights / sum(weights)#
					}#
				}#
			}#
			#
			#
			sol <- rep(0,nrow(PT))#
			for( i in 1:nrow(PT) )#
			{#
				sum <- 0#
				for( j in 1:ncol(PT) )#
				{#
					sum <- sum + PT[i,j] * weights[j]#
				}#
				sol[i] <- sum#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during weights manipulation")#
}#
#
sol <- matrix(c(seq(from=1,to=nrow(PT),by=1),sol), nrow = nrow(PT) )#
#
tmpErr<-try({#
			z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))#
			z <- xmlInternalTreeParse( saveXML(z) )#
			putAlternativesValues( z , sol  , rownames(PT) )#
		})	#
if (inherits(tmpErr, 'try-error')){#
	message <- "Fatal error while exporting data"#
} else {#
	message <- "Execution successful"#
}#
#
exportLog( message , outputsLocation , error=FALSE )#
saveXML( z, file = "alternativesValues.xml" )
source("/Users/silver/RMCDA/UTAR/UTAR-lib.R")
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "alternatives.xml" ]#
			if ( length( location ) == 0 ) #
			{#
				exportLog( "failed to find alternatives.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "alternatives.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			alternativesIDs <- getAlternativesIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') || alternativesIDs$status != "OK" )#
{#
	exportLog( "failed to get data from alternatives.xml" , outputsLocation ) #
}#
alternativesIDs <- alternativesIDs[[1]]#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "criteria.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find criteria.xml" , outputsLocation )#
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "criteria.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			criteriaIDs <- getCriteriaIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') ||  is.null( criteriaIDs$status != "OK" ) )#
{#
	exportLog( "failed to get data from criteria.xml" , outputsLocation )#
}#
criteriaIDs <- criteriaIDs[[1]]#
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "performanceTable.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find performanceTable.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "performanceTable.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			PT <- getPerformanceTables( xml )[[1]]#
			performanceTable <- PT#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "failed to get data from performanceTable.xml" , outputsLocation ) #
}#
#
#
tmpErr <- try({#
			co <- colnames(performanceTable)#
			ro <- rownames(performanceTable)#
			temporaryAlternatives <- c()#
			temporaryCriteria <- c()#
			for (l in 1:length(alternativesIDs) )#
			{#
				temp <- which( ro == alternativesIDs[l] )#
				temporaryAlternatives <- c( temporaryAlternatives , temp )#
			}#
			temporaryCriteria <- c()#
			for (l in 1:length(criteriaIDs) )#
			{#
				temp <- which( co == criteriaIDs[l] ) #
				temporaryCriteria <- c( temporaryCriteria , temp )#
			}#
			PT <- performanceTable[ temporaryAlternatives , temporaryCriteria ]#
			critIDs <- colnames(PT)#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error while manipulating criteria and alternatives")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "avg.xml" ]#
			if( length( location ) == 0 ) #
			{#
				avg <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "avg.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )	#
				if( result$status != "OK")#
				{#
					avg <- FALSE#
				}else{	#
					avg <- as.logical(result[[1]])#
					if( is.na(avg) )#
					{#
						avg <- FALSE#
					}#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during average selection ")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "norm.xml" ]#
			if( length( location ) == 0 ) #
			{#
				norm <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "norm.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )#
				if( result$status != "OK")#
				{#
					norm <- FALSE#
				}else{	#
					norm <- as.logical(result[[1]])#
					if( is.na(norm) )#
						norm <- FALSE#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during normalisation process")#
}#
#
tmpErr <- try({#
			if( avg == TRUE )#
			{#
				weights <- rep( 1/ncol(PT) , ncol(PT) )#
			} #
			if( avg == FALSE)#
			{#
				location <- listOfFiles[ listOfFiles == "weights.xml" ]#
				if( length( location ) == 0 ) #
				{#
					weights <- rep( 1 , ncol(PT) )#
				}#
				else #
				{#
					location <- paste( inputsLocation , location , sep="/" )#
					xml <- xmlInternalTreeParse( location )#
					if( checkXSD( xml ) != 1 )#
					{#
						exportLog( "weights.xml is not a valid XMCDA file" , outputsLocation ) #
					}#
					criteriaValues <- getCriteriaValues ( xml , critIDs )#
					if ( is.null(criteriaValues[[1]]) || criteriaValues$status != "OK" )#
					{#
						exportLog( "weights file problem" , outputsLocation )#
					}#
					weights <- criteriaValues[[1]]#
					rownames(weights) <- critIDs#
					weights <- as.vector( weights[,2] )#
					if( norm == TRUE )#
					{#
						weights <- weights / sum(weights)#
					}#
				}#
			}#
			#
			#
			sol <- rep(0,nrow(PT))#
			for( i in 1:nrow(PT) )#
			{#
				sum <- 0#
				for( j in 1:ncol(PT) )#
				{#
					sum <- sum + PT[i,j] * weights[j]#
				}#
				sol[i] <- sum#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during weights manipulation")#
}#
#
sol <- matrix(c(seq(from=1,to=nrow(PT),by=1),sol), nrow = nrow(PT) )#
#
tmpErr<-try({#
			z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))#
			z <- xmlInternalTreeParse( saveXML(z) )#
			putAlternativesValues( z , sol  , rownames(PT) )#
		})	#
if (inherits(tmpErr, 'try-error')){#
	message <- "Fatal error while exporting data"#
} else {#
	message <- "Execution successful"#
}#
#
exportLog( message , outputsLocation , error=FALSE )#
saveXML( z, file = "alternativesValues.xml" )
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "alternatives.xml" ]#
			if ( length( location ) == 0 ) #
			{#
				exportLog( "failed to find alternatives.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "alternatives.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			alternativesIDs <- getAlternativesIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') || alternativesIDs$status != "OK" )#
{#
	exportLog( "failed to get data from alternatives.xml" , outputsLocation ) #
}#
alternativesIDs <- alternativesIDs[[1]]#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "criteria.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find criteria.xml" , outputsLocation )#
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "criteria.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			criteriaIDs <- getCriteriaIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') ||  is.null( criteriaIDs$status != "OK" ) )#
{#
	exportLog( "failed to get data from criteria.xml" , outputsLocation )#
}#
criteriaIDs <- criteriaIDs[[1]]#
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "performanceTable.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find performanceTable.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "performanceTable.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			PT <- getPerformanceTables( xml )[[1]]#
			performanceTable <- PT#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "failed to get data from performanceTable.xml" , outputsLocation ) #
}#
#
#
tmpErr <- try({#
			co <- colnames(performanceTable)#
			ro <- rownames(performanceTable)#
			temporaryAlternatives <- c()#
			temporaryCriteria <- c()#
			for (l in 1:length(alternativesIDs) )#
			{#
				temp <- which( ro == alternativesIDs[l] )#
				temporaryAlternatives <- c( temporaryAlternatives , temp )#
			}#
			temporaryCriteria <- c()#
			for (l in 1:length(criteriaIDs) )#
			{#
				temp <- which( co == criteriaIDs[l] ) #
				temporaryCriteria <- c( temporaryCriteria , temp )#
			}#
			PT <- performanceTable[ temporaryAlternatives , temporaryCriteria ]#
			critIDs <- colnames(PT)#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error while manipulating criteria and alternatives")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "avg.xml" ]#
			if( length( location ) == 0 ) #
			{#
				avg <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "avg.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )	#
				if( result$status != "OK")#
				{#
					avg <- FALSE#
				}else{	#
					avg <- as.logical(result[[1]])#
					if( is.na(avg) )#
					{#
						avg <- FALSE#
					}#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during average selection ")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "norm.xml" ]#
			if( length( location ) == 0 ) #
			{#
				norm <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "norm.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )#
				if( result$status != "OK")#
				{#
					norm <- FALSE#
				}else{	#
					norm <- as.logical(result[[1]])#
					if( is.na(norm) )#
						norm <- FALSE#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during normalisation process")#
}#
#
tmpErr <- try({#
			if( avg == TRUE )#
			{#
				weights <- rep( 1/ncol(PT) , ncol(PT) )#
			} #
			if( avg == FALSE)#
			{#
				location <- listOfFiles[ listOfFiles == "weights.xml" ]#
				if( length( location ) == 0 ) #
				{#
					weights <- rep( 1 , ncol(PT) )#
				}#
				else #
				{#
					location <- paste( inputsLocation , location , sep="/" )#
					xml <- xmlInternalTreeParse( location )#
					if( checkXSD( xml ) != 1 )#
					{#
						exportLog( "weights.xml is not a valid XMCDA file" , outputsLocation ) #
					}#
					criteriaValues <- getCriteriaValues ( xml , critIDs )#
					if ( is.null(criteriaValues[[1]]) || criteriaValues$status != "OK" )#
					{#
						exportLog( "weights file problem" , outputsLocation )#
					}#
					weights <- criteriaValues[[1]]#
					rownames(weights) <- critIDs#
					weights <- as.vector( weights[,2] )#
					if( norm == TRUE )#
					{#
						weights <- weights / sum(weights)#
					}#
				}#
			}#
			#
			#
			sol <- rep(0,nrow(PT))#
			for( i in 1:nrow(PT) )#
			{#
				sum <- 0#
				for( j in 1:ncol(PT) )#
				{#
					sum <- sum + PT[i,j] * weights[j]#
				}#
				sol[i] <- sum#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during weights manipulation")#
}#
#
sol <- matrix(c(seq(from=1,to=nrow(PT),by=1),sol), nrow = nrow(PT) )#
#
tmpErr<-try({#
			z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))#
			z <- xmlInternalTreeParse( saveXML(z) )#
			putAlternativesValues( z , sol  , rownames(PT) )#
		})	#
if (inherits(tmpErr, 'try-error')){#
	message <- "Fatal error while exporting data"#
} else {#
	message <- "Execution successful"#
}#
#
exportLog( message , outputsLocation , error=FALSE )#
saveXML( z, file = "alternativesValues.xml" )
getwd()
setwd("/Users/silver/RMCDA/UTAR/generalWeightedSum-UTAR")
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "alternatives.xml" ]#
			if ( length( location ) == 0 ) #
			{#
				exportLog( "failed to find alternatives.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "alternatives.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			alternativesIDs <- getAlternativesIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') || alternativesIDs$status != "OK" )#
{#
	exportLog( "failed to get data from alternatives.xml" , outputsLocation ) #
}#
alternativesIDs <- alternativesIDs[[1]]#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "criteria.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find criteria.xml" , outputsLocation )#
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "criteria.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			criteriaIDs <- getCriteriaIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') ||  is.null( criteriaIDs$status != "OK" ) )#
{#
	exportLog( "failed to get data from criteria.xml" , outputsLocation )#
}#
criteriaIDs <- criteriaIDs[[1]]#
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "performanceTable.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find performanceTable.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "performanceTable.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			PT <- getPerformanceTables( xml )[[1]]#
			performanceTable <- PT#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "failed to get data from performanceTable.xml" , outputsLocation ) #
}#
#
#
tmpErr <- try({#
			co <- colnames(performanceTable)#
			ro <- rownames(performanceTable)#
			temporaryAlternatives <- c()#
			temporaryCriteria <- c()#
			for (l in 1:length(alternativesIDs) )#
			{#
				temp <- which( ro == alternativesIDs[l] )#
				temporaryAlternatives <- c( temporaryAlternatives , temp )#
			}#
			temporaryCriteria <- c()#
			for (l in 1:length(criteriaIDs) )#
			{#
				temp <- which( co == criteriaIDs[l] ) #
				temporaryCriteria <- c( temporaryCriteria , temp )#
			}#
			PT <- performanceTable[ temporaryAlternatives , temporaryCriteria ]#
			critIDs <- colnames(PT)#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error while manipulating criteria and alternatives")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "avg.xml" ]#
			if( length( location ) == 0 ) #
			{#
				avg <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "avg.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )	#
				if( result$status != "OK")#
				{#
					avg <- FALSE#
				}else{	#
					avg <- as.logical(result[[1]])#
					if( is.na(avg) )#
					{#
						avg <- FALSE#
					}#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during average selection ")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "norm.xml" ]#
			if( length( location ) == 0 ) #
			{#
				norm <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "norm.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )#
				if( result$status != "OK")#
				{#
					norm <- FALSE#
				}else{	#
					norm <- as.logical(result[[1]])#
					if( is.na(norm) )#
						norm <- FALSE#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during normalisation process")#
}#
#
tmpErr <- try({#
			if( avg == TRUE )#
			{#
				weights <- rep( 1/ncol(PT) , ncol(PT) )#
			} #
			if( avg == FALSE)#
			{#
				location <- listOfFiles[ listOfFiles == "weights.xml" ]#
				if( length( location ) == 0 ) #
				{#
					weights <- rep( 1 , ncol(PT) )#
				}#
				else #
				{#
					location <- paste( inputsLocation , location , sep="/" )#
					xml <- xmlInternalTreeParse( location )#
					if( checkXSD( xml ) != 1 )#
					{#
						exportLog( "weights.xml is not a valid XMCDA file" , outputsLocation ) #
					}#
					criteriaValues <- getCriteriaValues ( xml , critIDs )#
					if ( is.null(criteriaValues[[1]]) || criteriaValues$status != "OK" )#
					{#
						exportLog( "weights file problem" , outputsLocation )#
					}#
					weights <- criteriaValues[[1]]#
					rownames(weights) <- critIDs#
					weights <- as.vector( weights[,2] )#
					if( norm == TRUE )#
					{#
						weights <- weights / sum(weights)#
					}#
				}#
			}#
			#
			#
			sol <- rep(0,nrow(PT))#
			for( i in 1:nrow(PT) )#
			{#
				sum <- 0#
				for( j in 1:ncol(PT) )#
				{#
					sum <- sum + PT[i,j] * weights[j]#
				}#
				sol[i] <- sum#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during weights manipulation")#
}#
#
sol <- matrix(c(seq(from=1,to=nrow(PT),by=1),sol), nrow = nrow(PT) )#
#
tmpErr<-try({#
			z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))#
			z <- xmlInternalTreeParse( saveXML(z) )#
			putAlternativesValues( z , sol  , rownames(PT) )#
		})	#
if (inherits(tmpErr, 'try-error')){#
	message <- "Fatal error while exporting data"#
} else {#
	message <- "Execution successful"#
}#
#
exportLog( message , outputsLocation , error=FALSE )#
saveXML( z, file = "alternativesValues.xml" )
print(sol)
z
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "alternatives.xml" ]#
			if ( length( location ) == 0 ) #
			{#
				exportLog( "failed to find alternatives.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "alternatives.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			alternativesIDs <- getAlternativesIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') || alternativesIDs$status != "OK" )#
{#
	exportLog( "failed to get data from alternatives.xml" , outputsLocation ) #
}#
alternativesIDs <- alternativesIDs[[1]]#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "criteria.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find criteria.xml" , outputsLocation )#
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "criteria.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			criteriaIDs <- getCriteriaIDs ( xml )#
		})#
if ( inherits(tmpErr, 'try-error') ||  is.null( criteriaIDs$status != "OK" ) )#
{#
	exportLog( "failed to get data from criteria.xml" , outputsLocation )#
}#
criteriaIDs <- criteriaIDs[[1]]#
#
tmpErr <- try({#
			listOfFiles <- list.files( inputsLocation )#
			location <- listOfFiles[ listOfFiles == "performanceTable.xml" ]#
			if( length( location ) == 0 ) #
			{#
				exportLog( "failed to find performanceTable.xml" , outputsLocation ) #
			}#
			location <- paste( inputsLocation , location , sep="/" )#
			xml <- xmlInternalTreeParse( location )#
			if( checkXSD( xml ) != 1 )#
			{#
				exportLog( "performanceTable.xml is not a valid XMCDA file" , outputsLocation ) #
			}#
			PT <- getPerformanceTables( xml )[[1]]#
			performanceTable <- PT#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "failed to get data from performanceTable.xml" , outputsLocation ) #
}#
#
#
tmpErr <- try({#
			co <- colnames(performanceTable)#
			ro <- rownames(performanceTable)#
			temporaryAlternatives <- c()#
			temporaryCriteria <- c()#
			for (l in 1:length(alternativesIDs) )#
			{#
				temp <- which( ro == alternativesIDs[l] )#
				temporaryAlternatives <- c( temporaryAlternatives , temp )#
			}#
			temporaryCriteria <- c()#
			for (l in 1:length(criteriaIDs) )#
			{#
				temp <- which( co == criteriaIDs[l] ) #
				temporaryCriteria <- c( temporaryCriteria , temp )#
			}#
			PT <- performanceTable[ temporaryAlternatives , temporaryCriteria ]#
			critIDs <- colnames(PT)#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error while manipulating criteria and alternatives")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "avg.xml" ]#
			if( length( location ) == 0 ) #
			{#
				avg <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "avg.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )	#
				if( result$status != "OK")#
				{#
					avg <- FALSE#
				}else{	#
					avg <- as.logical(result[[1]])#
					if( is.na(avg) )#
					{#
						avg <- FALSE#
					}#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during average selection ")#
}#
#
tmpErr <- try({#
			location <- listOfFiles[ listOfFiles == "norm.xml" ]#
			if( length( location ) == 0 ) #
			{#
				norm <- FALSE#
			}#
			if(  length( location ) > 0 )#
			{#
				location <- paste( inputsLocation , location , sep="/" )#
				xml <- xmlInternalTreeParse( location )#
				if( checkXSD( xml ) != 1 )#
				{#
					exportLog( "norm.xml is not a valid XMCDA file" , outputsLocation ) #
				}#
				result <- getParameters( xml )#
				if( result$status != "OK")#
				{#
					norm <- FALSE#
				}else{	#
					norm <- as.logical(result[[1]])#
					if( is.na(norm) )#
						norm <- FALSE#
				}#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during normalisation process")#
}#
#
tmpErr <- try({#
			if( avg == TRUE )#
			{#
				weights <- rep( 1/ncol(PT) , ncol(PT) )#
			} #
			if( avg == FALSE)#
			{#
				location <- listOfFiles[ listOfFiles == "weights.xml" ]#
				if( length( location ) == 0 ) #
				{#
					weights <- rep( 1 , ncol(PT) )#
				}#
				else #
				{#
					location <- paste( inputsLocation , location , sep="/" )#
					xml <- xmlInternalTreeParse( location )#
					if( checkXSD( xml ) != 1 )#
					{#
						exportLog( "weights.xml is not a valid XMCDA file" , outputsLocation ) #
					}#
					criteriaValues <- getCriteriaValues ( xml , critIDs )#
					if ( is.null(criteriaValues[[1]]) || criteriaValues$status != "OK" )#
					{#
						exportLog( "weights file problem" , outputsLocation )#
					}#
					weights <- criteriaValues[[1]]#
					rownames(weights) <- critIDs#
					weights <- as.vector( weights[,2] )#
					if( norm == TRUE )#
					{#
						weights <- weights / sum(weights)#
					}#
				}#
			}#
			#
			#
			sol <- rep(0,nrow(PT))#
			for( i in 1:nrow(PT) )#
			{#
				sum <- 0#
				for( j in 1:ncol(PT) )#
				{#
					sum <- sum + PT[i,j] * weights[j]#
				}#
				sol[i] <- sum#
			}#
		})#
if ( inherits(tmpErr, 'try-error') ){#
	exportLog( "error during weights manipulation")#
}#
#
sol <- matrix(c(seq(from=1,to=nrow(PT),by=1),sol), nrow = nrow(PT) )#
#
tmpErr<-try({#
			z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))#
			z <- xmlInternalTreeParse( saveXML(z) )#
			putAlternativesValues( z , sol  , rownames(PT) )#
		})	#
if (inherits(tmpErr, 'try-error')){#
	message <- "Fatal error while exporting data"#
} else {#
	message <- "Execution successful"#
}#
#
exportLog( message , outputsLocation , error=FALSE )#
saveXML( z, file = paste(outputsLocation,"alternativesValues.xml",sep="/") )
