exportLog <- function( LOG , outputsLocation , status="FAILED" ) 
{
#setwd(outputsLocation)
	if( status == "FAILED" )
	{
		logMessage <- "Plot Failed"	
		errorMessage <- LOG[  length(LOG) ] #[]?
	} 
	else 
	{
		logMessage <- "Plot successfully realized"
		errorMessage <- "No error"
	}	
	z <- convertLogIntoTree( logMessage , errorMessage )
	f <- tempfile()
	saveXML(z, f, encoding = "UTF-8",indent=TRUE, file="message.xml",prefix = '<?xml version="1.0"?>\n')
}

convertLogIntoTree <- function( logMessage="error" , errorMessage="error" ) 
{
	z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))
	z$addNode("methodMessages",close=FALSE,attrs=c("mcdaConcept"="methodMessages"))
	z$addNode("logMessage",close=FALSE)
	z$addNode("text",logMessage)
	z$closeTag()
	z$addNode("errorMessage",close=FALSE)
	z$addNode("text",errorMessage)
	z$closeTag()
	return(z)
}

###############################################################################

inputsLocation <- commandArgs()[5]
outputsLocation <- commandArgs()[6]

#source("/Users/silver/Desktop/Rstat/ACUTAR/OLD/XMCDA/libxmcda.R")
#source("/Users/silver/Desktop/Rstat/libACUTAR.R")
#source("libACUTAR.R")

library(RXMCDA)
listOfFiles <- list.files( inputsLocation )

location <- listOfFiles[ listOfFiles == "alternatives.xml" ]
if ( length( location ) == 0 ) 
{
	exportLog( list("failed to find alternatives.xml") , outputsLocation ) 
	stop("alternatives.xml")
}
location <- paste( inputsLocation , location , sep="/" )
xml <- xmlInternalTreeParse( location )
if( checkXSD( xml ) != 1 )
{
	exportLog( list("alternatives.xml is not a valid XMCDA file") , outputsLocation ) 
	stop("alternatives.xml")	
}
alternativesIDs <- getAlternativesIDs ( xml )
if ( alternativesIDs$status != "OK" )
{
	exportLog( list("failed to get data from alternatives.xml") , outputsLocation ) 
	stop("alternatives.xml")
}
alternativesIDs <- alternativesIDs[[1]]


location <- listOfFiles[ listOfFiles == "alternativesValues1.xml" ]
if( length( location ) == 0 ) 
{
	exportLog( list("failed to find alternativesValues1.xml") , outputsLocation ) 
	stop("alternativesValues1.xml")
}
location <- paste( inputsLocation , location , sep="/" )
xml <- xmlInternalTreeParse( location )
if( checkXSD( xml ) != 1 )
{
	exportLog( list("alternativesValues1.xml is not a valid XMCDA file") , outputsLocation ) 
	stop("alternativesValues1.xml")	
}
alternativesValues1 <- getAlternativesValues ( xml , alternativesIDs )
if ( alternativesValues1$status != "OK" )
{
	exportLog( list("failed to get data from alternativesValues1.xml") , outputsLocation )
	stop("alternativesValues1.xml")
}
alternativesValues1 <- alternativesValues1[[1]]

listOfFiles <- list.files( inputsLocation )
location <- listOfFiles[ listOfFiles == "alternativesValues2.xml" ]
if( length( location ) == 0 ) 
{
	exportLog( list("failed to find alternativesValues1.xml") , outputsLocation )
	stop("alternativesValues2.xml")
}
location <- paste( inputsLocation , location , sep="/" )
xml <- xmlInternalTreeParse( location )
if( checkXSD( xml ) != 1 )
{
	exportLog( list("alternativesValues2.xml is not a valid XMCDA file") , outputsLocation ) 
	stop("alternativesValues2.xml")	
}
alternativesValues2 <- getAlternativesValues ( xml , alternativesIDs )
if ( alternativesValues2$status != "OK" )
{
	exportLog( list("failed to get data from alternativesValues2.xml") , outputsLocation )
	stop("alternativesValues2.xml")
}
alternativesValues2 <- alternativesValues2[[1]]

n <- NULL
for( i in 1:nrow(alternativesValues1) )
{
	if( any( alternativesValues1[i,1] == alternativesValues2[,1] ) )
	{
		if( is.null(n) )
		{
			n <- alternativesValues1[i,] 
		}
		else
		{
			n <- rbind( n , alternativesValues1[i,] )
		}
	}
}
colnames(n) = NULL
rownames(n) = NULL
alternativesValues1 <- n

n <- NULL
for( i in 1:nrow(alternativesValues2) )
{
	if( any( alternativesValues2[i,1] == alternativesValues1[,1] ) )
	{
		if( is.null(n) )
		{
			n <- alternativesValues2[i,] 
		}
		else
		{
			n <- rbind( n , alternativesValues2[i,] )
		}
	}
}
colnames(n) = NULL
rownames(n) = NULL
alternativesValues2 <- n


a1 <- alternativesValues1[ order( alternativesValues1[,2]) , 1]
a2 <- alternativesValues2[ order( alternativesValues2[,2] ) , 1 ]

v1 <- alternativesValues1[ order( alternativesValues1[,2] ) , 2 ]
o <- alternativesValues1[ order( alternativesValues1[,2] ) , 1 ]
#v2 <- alternativesValues2[ order( alternativesValues2[,1] ) , 2 ]
v2 <- c()
for( i in 1:length(a1) )
{
	v2 <- c( v2 , alternativesValues2[ which( alternativesValues2[,1] == a1[i] ) , 2 ] )
}



f <- tempfile()
z <- xmlTree("xmcda:XMCDA",namespaces=list(xsi="http://www.w3.org/2001/XMLSchema-instance",xmcda="http://www.decision-deck.org/2009/XMCDA-2.0.0"))
z <- xmlInternalTreeParse( saveXML(z, f, encoding = "UTF-8",indent=TRUE,prefix = '<?xml version="1.0"?>\n') )

tmpErr<-try(
{
	setwd(outputsLocation)
	pdf("out.pdf", width=length(alternativesIDs) + 2 , height = length(alternativesIDs) + 2)
	plot(v2~v1 , type="b", cex=2 , cex.axis=2.1 , xlim=c(min(v1)-mean(v1)/3 , max(v1)+mean(v1)/3 ) , ylim=c(min(v2)-mean(v2)/3 , max(v2)+mean(v2)/3 )) 
	text( v1,v2,pos=3,offset=1.3,cex=2,labels = alternativesIDs[o] )
	title(xlab="alternativesValues1", ylab="alternativesValues2" , cex.lab=1.5)
	dev.off()
	system("convert out.pdf out.png")
	system("base64 -w0 out.png > out.base64")
# system("openssl base64 -in out.png -out out.base64 ")
	tmp <-readLines(file("out.base64","rt"))
	system("rm out.base64 out.png out.pdf")
	closeAllConnections()
})

putAlternativesPlot(z, tmp, alternativesIDs)
filename <- "alternativesValuesPlotComparison.xml"
whereF =  paste( outputsLocation , filename , sep="/" )

exportLog( list("OK") , outputsLocation , status = "OK" )
saveXML(z, f, encoding = "UTF-8",indent=TRUE, file=filename,prefix = '<?xml version="1.0"?>\n')
